//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleClientForTesting.WCFService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WCFService.IWCFServerClient", CallbackContract=typeof(ConsoleClientForTesting.WCFService.IWCFServerClientCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IWCFServerClient {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServerClient/ClientRegistration", ReplyAction="http://tempuri.org/IWCFServerClient/ClientRegistrationResponse")]
        void ClientRegistration(string registInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServerClient/ClientRegistration", ReplyAction="http://tempuri.org/IWCFServerClient/ClientRegistrationResponse")]
        System.Threading.Tasks.Task ClientRegistrationAsync(string registInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServerClient/ClientProcesses", ReplyAction="http://tempuri.org/IWCFServerClient/ClientProcessesResponse")]
        void ClientProcesses(string[] processList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServerClient/ClientProcesses", ReplyAction="http://tempuri.org/IWCFServerClient/ClientProcessesResponse")]
        System.Threading.Tasks.Task ClientProcessesAsync(string[] processList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServerClient/ClientServices", ReplyAction="http://tempuri.org/IWCFServerClient/ClientServicesResponse")]
        void ClientServices(string[] serviceList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServerClient/ClientServices", ReplyAction="http://tempuri.org/IWCFServerClient/ClientServicesResponse")]
        System.Threading.Tasks.Task ClientServicesAsync(string[] serviceList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServerClient/ClientApplications", ReplyAction="http://tempuri.org/IWCFServerClient/ClientApplicationsResponse")]
        void ClientApplications(string[] applicationList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServerClient/ClientApplications", ReplyAction="http://tempuri.org/IWCFServerClient/ClientApplicationsResponse")]
        System.Threading.Tasks.Task ClientApplicationsAsync(string[] applicationList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServerClient/GetClients", ReplyAction="http://tempuri.org/IWCFServerClient/GetClientsResponse")]
        string[] GetClients();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServerClient/GetClients", ReplyAction="http://tempuri.org/IWCFServerClient/GetClientsResponse")]
        System.Threading.Tasks.Task<string[]> GetClientsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServerClient/GetProcessById", ReplyAction="http://tempuri.org/IWCFServerClient/GetProcessByIdResponse")]
        string[] GetProcessById(string machineKey, int processId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServerClient/GetProcessById", ReplyAction="http://tempuri.org/IWCFServerClient/GetProcessByIdResponse")]
        System.Threading.Tasks.Task<string[]> GetProcessByIdAsync(string machineKey, int processId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServerClient/StopProcessById", ReplyAction="http://tempuri.org/IWCFServerClient/StopProcessByIdResponse")]
        bool StopProcessById(string machineKey, int processId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServerClient/StopProcessById", ReplyAction="http://tempuri.org/IWCFServerClient/StopProcessByIdResponse")]
        System.Threading.Tasks.Task<bool> StopProcessByIdAsync(string machineKey, int processId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServerClient/RestartProcessById", ReplyAction="http://tempuri.org/IWCFServerClient/RestartProcessByIdResponse")]
        bool RestartProcessById(string machineKey, int processId, string procName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServerClient/RestartProcessById", ReplyAction="http://tempuri.org/IWCFServerClient/RestartProcessByIdResponse")]
        System.Threading.Tasks.Task<bool> RestartProcessByIdAsync(string machineKey, int processId, string procName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServerClient/StopServiceByName", ReplyAction="http://tempuri.org/IWCFServerClient/StopServiceByNameResponse")]
        bool StopServiceByName(string machineKey, string serviceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServerClient/StopServiceByName", ReplyAction="http://tempuri.org/IWCFServerClient/StopServiceByNameResponse")]
        System.Threading.Tasks.Task<bool> StopServiceByNameAsync(string machineKey, string serviceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServerClient/StartServiceByName", ReplyAction="http://tempuri.org/IWCFServerClient/StartServiceByNameResponse")]
        bool StartServiceByName(string machineKey, string serviceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServerClient/StartServiceByName", ReplyAction="http://tempuri.org/IWCFServerClient/StartServiceByNameResponse")]
        System.Threading.Tasks.Task<bool> StartServiceByNameAsync(string machineKey, string serviceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServerClient/StartApplicationByPath", ReplyAction="http://tempuri.org/IWCFServerClient/StartApplicationByPathResponse")]
        bool StartApplicationByPath(string machineKey, string appPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServerClient/StartApplicationByPath", ReplyAction="http://tempuri.org/IWCFServerClient/StartApplicationByPathResponse")]
        System.Threading.Tasks.Task<bool> StartApplicationByPathAsync(string machineKey, string appPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServerClient/GetProcessesFromClient", ReplyAction="http://tempuri.org/IWCFServerClient/GetProcessesFromClientResponse")]
        string[] GetProcessesFromClient(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServerClient/GetProcessesFromClient", ReplyAction="http://tempuri.org/IWCFServerClient/GetProcessesFromClientResponse")]
        System.Threading.Tasks.Task<string[]> GetProcessesFromClientAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServerClient/GetServicesFromClient", ReplyAction="http://tempuri.org/IWCFServerClient/GetServicesFromClientResponse")]
        string[] GetServicesFromClient(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServerClient/GetServicesFromClient", ReplyAction="http://tempuri.org/IWCFServerClient/GetServicesFromClientResponse")]
        System.Threading.Tasks.Task<string[]> GetServicesFromClientAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServerClient/GetApplicationsFromClient", ReplyAction="http://tempuri.org/IWCFServerClient/GetApplicationsFromClientResponse")]
        string[] GetApplicationsFromClient(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServerClient/GetApplicationsFromClient", ReplyAction="http://tempuri.org/IWCFServerClient/GetApplicationsFromClientResponse")]
        System.Threading.Tasks.Task<string[]> GetApplicationsFromClientAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServerClient/RemoveClientFromList", ReplyAction="http://tempuri.org/IWCFServerClient/RemoveClientFromListResponse")]
        void RemoveClientFromList(string clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServerClient/RemoveClientFromList", ReplyAction="http://tempuri.org/IWCFServerClient/RemoveClientFromListResponse")]
        System.Threading.Tasks.Task RemoveClientFromListAsync(string clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServerClient/ServerClosed", ReplyAction="http://tempuri.org/IWCFServerClient/ServerClosedResponse")]
        void ServerClosed();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServerClient/ServerClosed", ReplyAction="http://tempuri.org/IWCFServerClient/ServerClosedResponse")]
        System.Threading.Tasks.Task ServerClosedAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWCFServerClientCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServerClient/Method1", ReplyAction="http://tempuri.org/IWCFServerClient/Method1Response")]
        void Method1(string clientsData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServerClient/ProcessById", ReplyAction="http://tempuri.org/IWCFServerClient/ProcessByIdResponse")]
        string[] ProcessById(int processId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServerClient/StopProcessId", ReplyAction="http://tempuri.org/IWCFServerClient/StopProcessIdResponse")]
        bool StopProcessId(int processId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServerClient/RestartProcessId", ReplyAction="http://tempuri.org/IWCFServerClient/RestartProcessIdResponse")]
        bool RestartProcessId(int processId, string procName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServerClient/StopServiceName", ReplyAction="http://tempuri.org/IWCFServerClient/StopServiceNameResponse")]
        bool StopServiceName(string serviceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServerClient/StartServiceName", ReplyAction="http://tempuri.org/IWCFServerClient/StartServiceNameResponse")]
        bool StartServiceName(string serviceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServerClient/StartApplicationPath", ReplyAction="http://tempuri.org/IWCFServerClient/StartApplicationPathResponse")]
        bool StartApplicationPath(string appPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServerClient/GetProcessesFromMachine", ReplyAction="http://tempuri.org/IWCFServerClient/GetProcessesFromMachineResponse")]
        void GetProcessesFromMachine();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServerClient/GetServicesFromMachine", ReplyAction="http://tempuri.org/IWCFServerClient/GetServicesFromMachineResponse")]
        void GetServicesFromMachine();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServerClient/GetApplicationsFromMachine", ReplyAction="http://tempuri.org/IWCFServerClient/GetApplicationsFromMachineResponse")]
        void GetApplicationsFromMachine();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServerClient/NotifyServer", ReplyAction="http://tempuri.org/IWCFServerClient/NotifyServerResponse")]
        void NotifyServer();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWCFServerClientChannel : ConsoleClientForTesting.WCFService.IWCFServerClient, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WCFServerClientClient : System.ServiceModel.DuplexClientBase<ConsoleClientForTesting.WCFService.IWCFServerClient>, ConsoleClientForTesting.WCFService.IWCFServerClient {
        
        public WCFServerClientClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public WCFServerClientClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public WCFServerClientClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public WCFServerClientClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public WCFServerClientClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void ClientRegistration(string registInfo) {
            base.Channel.ClientRegistration(registInfo);
        }
        
        public System.Threading.Tasks.Task ClientRegistrationAsync(string registInfo) {
            return base.Channel.ClientRegistrationAsync(registInfo);
        }
        
        public void ClientProcesses(string[] processList) {
            base.Channel.ClientProcesses(processList);
        }
        
        public System.Threading.Tasks.Task ClientProcessesAsync(string[] processList) {
            return base.Channel.ClientProcessesAsync(processList);
        }
        
        public void ClientServices(string[] serviceList) {
            base.Channel.ClientServices(serviceList);
        }
        
        public System.Threading.Tasks.Task ClientServicesAsync(string[] serviceList) {
            return base.Channel.ClientServicesAsync(serviceList);
        }
        
        public void ClientApplications(string[] applicationList) {
            base.Channel.ClientApplications(applicationList);
        }
        
        public System.Threading.Tasks.Task ClientApplicationsAsync(string[] applicationList) {
            return base.Channel.ClientApplicationsAsync(applicationList);
        }
        
        public string[] GetClients() {
            return base.Channel.GetClients();
        }
        
        public System.Threading.Tasks.Task<string[]> GetClientsAsync() {
            return base.Channel.GetClientsAsync();
        }
        
        public string[] GetProcessById(string machineKey, int processId) {
            return base.Channel.GetProcessById(machineKey, processId);
        }
        
        public System.Threading.Tasks.Task<string[]> GetProcessByIdAsync(string machineKey, int processId) {
            return base.Channel.GetProcessByIdAsync(machineKey, processId);
        }
        
        public bool StopProcessById(string machineKey, int processId) {
            return base.Channel.StopProcessById(machineKey, processId);
        }
        
        public System.Threading.Tasks.Task<bool> StopProcessByIdAsync(string machineKey, int processId) {
            return base.Channel.StopProcessByIdAsync(machineKey, processId);
        }
        
        public bool RestartProcessById(string machineKey, int processId, string procName) {
            return base.Channel.RestartProcessById(machineKey, processId, procName);
        }
        
        public System.Threading.Tasks.Task<bool> RestartProcessByIdAsync(string machineKey, int processId, string procName) {
            return base.Channel.RestartProcessByIdAsync(machineKey, processId, procName);
        }
        
        public bool StopServiceByName(string machineKey, string serviceName) {
            return base.Channel.StopServiceByName(machineKey, serviceName);
        }
        
        public System.Threading.Tasks.Task<bool> StopServiceByNameAsync(string machineKey, string serviceName) {
            return base.Channel.StopServiceByNameAsync(machineKey, serviceName);
        }
        
        public bool StartServiceByName(string machineKey, string serviceName) {
            return base.Channel.StartServiceByName(machineKey, serviceName);
        }
        
        public System.Threading.Tasks.Task<bool> StartServiceByNameAsync(string machineKey, string serviceName) {
            return base.Channel.StartServiceByNameAsync(machineKey, serviceName);
        }
        
        public bool StartApplicationByPath(string machineKey, string appPath) {
            return base.Channel.StartApplicationByPath(machineKey, appPath);
        }
        
        public System.Threading.Tasks.Task<bool> StartApplicationByPathAsync(string machineKey, string appPath) {
            return base.Channel.StartApplicationByPathAsync(machineKey, appPath);
        }
        
        public string[] GetProcessesFromClient(string key) {
            return base.Channel.GetProcessesFromClient(key);
        }
        
        public System.Threading.Tasks.Task<string[]> GetProcessesFromClientAsync(string key) {
            return base.Channel.GetProcessesFromClientAsync(key);
        }
        
        public string[] GetServicesFromClient(string key) {
            return base.Channel.GetServicesFromClient(key);
        }
        
        public System.Threading.Tasks.Task<string[]> GetServicesFromClientAsync(string key) {
            return base.Channel.GetServicesFromClientAsync(key);
        }
        
        public string[] GetApplicationsFromClient(string key) {
            return base.Channel.GetApplicationsFromClient(key);
        }
        
        public System.Threading.Tasks.Task<string[]> GetApplicationsFromClientAsync(string key) {
            return base.Channel.GetApplicationsFromClientAsync(key);
        }
        
        public void RemoveClientFromList(string clientId) {
            base.Channel.RemoveClientFromList(clientId);
        }
        
        public System.Threading.Tasks.Task RemoveClientFromListAsync(string clientId) {
            return base.Channel.RemoveClientFromListAsync(clientId);
        }
        
        public void ServerClosed() {
            base.Channel.ServerClosed();
        }
        
        public System.Threading.Tasks.Task ServerClosedAsync() {
            return base.Channel.ServerClosedAsync();
        }
    }
}
